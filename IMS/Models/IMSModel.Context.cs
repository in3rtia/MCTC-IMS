//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IMS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StockManagementEntities : DbContext
    {
        public StockManagementEntities()
            : base("name=StockManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Approval_Status> Approval_Status { get; set; }
        public virtual DbSet<Employee_Details> Employee_Details { get; set; }
        public virtual DbSet<Movement> Movements { get; set; }
        public virtual DbSet<Request_Details> Request_Details { get; set; }
        public virtual DbSet<Return_Status> Return_Status { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Shelf_Compartment> Shelf_Compartment { get; set; }
        public virtual DbSet<Shelves_Table> Shelves_Table { get; set; }
        public virtual DbSet<Stock_Availability> Stock_Availability { get; set; }
        public virtual DbSet<Stock_Category> Stock_Category { get; set; }
        public virtual DbSet<Stock_Details> Stock_Details { get; set; }
        public virtual DbSet<Stock_Type> Stock_Type { get; set; }
        public virtual DbSet<Stock_Withdraw> Stock_Withdraw { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Type_of_Transaction> Type_of_Transaction { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<Shelf> Shelves { get; set; }
    
        public virtual ObjectResult<getAllApprovedORDeniedRequests_Result> getAllApprovedORDeniedRequests(Nullable<int> approval_status)
        {
            var approval_statusParameter = approval_status.HasValue ?
                new ObjectParameter("approval_status", approval_status) :
                new ObjectParameter("approval_status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllApprovedORDeniedRequests_Result>("getAllApprovedORDeniedRequests", approval_statusParameter);
        }
    
        public virtual ObjectResult<getAllIssues_Result> getAllIssues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllIssues_Result>("getAllIssues");
        }
    
        public virtual ObjectResult<getAllRequests_Result> getAllRequests()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllRequests_Result>("getAllRequests");
        }
    
        public virtual ObjectResult<getAllStock_Result> getAllStock()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllStock_Result>("getAllStock");
        }
    
        public virtual ObjectResult<getAllUnreturnedStock_Result> getAllUnreturnedStock(Nullable<int> return_status)
        {
            var return_statusParameter = return_status.HasValue ?
                new ObjectParameter("return_status", return_status) :
                new ObjectParameter("return_status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllUnreturnedStock_Result>("getAllUnreturnedStock", return_statusParameter);
        }
    
        public virtual ObjectResult<getAvailableStock_Result> getAvailableStock(string category_id)
        {
            var category_idParameter = category_id != null ?
                new ObjectParameter("category_id", category_id) :
                new ObjectParameter("category_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAvailableStock_Result>("getAvailableStock", category_idParameter);
        }
    
        public virtual ObjectResult<getMovements_Result> getMovements(string transactiontype)
        {
            var transactiontypeParameter = transactiontype != null ?
                new ObjectParameter("transactiontype", transactiontype) :
                new ObjectParameter("transactiontype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getMovements_Result>("getMovements", transactiontypeParameter);
        }
    
        public virtual ObjectResult<getStockByCategory_Result> getStockByCategory(string category)
        {
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStockByCategory_Result>("getStockByCategory", categoryParameter);
        }
    
        public virtual ObjectResult<getStockShelves_Result> getStockShelves()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStockShelves_Result>("getStockShelves");
        }
    
        public virtual int insertIssue(string movement_ID, string stock_code, string request_ID, Nullable<int> quantity_supplied, string issued_by, string received_by, Nullable<System.DateTime> date_received, Nullable<int> return_status, Nullable<System.DateTime> expected_return_date, Nullable<System.DateTime> return_date)
        {
            var movement_IDParameter = movement_ID != null ?
                new ObjectParameter("movement_ID", movement_ID) :
                new ObjectParameter("movement_ID", typeof(string));
    
            var stock_codeParameter = stock_code != null ?
                new ObjectParameter("stock_code", stock_code) :
                new ObjectParameter("stock_code", typeof(string));
    
            var request_IDParameter = request_ID != null ?
                new ObjectParameter("request_ID", request_ID) :
                new ObjectParameter("request_ID", typeof(string));
    
            var quantity_suppliedParameter = quantity_supplied.HasValue ?
                new ObjectParameter("quantity_supplied", quantity_supplied) :
                new ObjectParameter("quantity_supplied", typeof(int));
    
            var issued_byParameter = issued_by != null ?
                new ObjectParameter("issued_by", issued_by) :
                new ObjectParameter("issued_by", typeof(string));
    
            var received_byParameter = received_by != null ?
                new ObjectParameter("received_by", received_by) :
                new ObjectParameter("received_by", typeof(string));
    
            var date_receivedParameter = date_received.HasValue ?
                new ObjectParameter("date_received", date_received) :
                new ObjectParameter("date_received", typeof(System.DateTime));
    
            var return_statusParameter = return_status.HasValue ?
                new ObjectParameter("return_status", return_status) :
                new ObjectParameter("return_status", typeof(int));
    
            var expected_return_dateParameter = expected_return_date.HasValue ?
                new ObjectParameter("expected_return_date", expected_return_date) :
                new ObjectParameter("expected_return_date", typeof(System.DateTime));
    
            var return_dateParameter = return_date.HasValue ?
                new ObjectParameter("return_date", return_date) :
                new ObjectParameter("return_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertIssue", movement_IDParameter, stock_codeParameter, request_IDParameter, quantity_suppliedParameter, issued_byParameter, received_byParameter, date_receivedParameter, return_statusParameter, expected_return_dateParameter, return_dateParameter);
        }
    
        public virtual int insertRequest(string request_ID, string stock_code, string comaprtment_ID, string purpose_of_item, string mine_number, string date_of_request, Nullable<int> quantity, string unit_of_issue, Nullable<int> approval_status, string approver)
        {
            var request_IDParameter = request_ID != null ?
                new ObjectParameter("request_ID", request_ID) :
                new ObjectParameter("request_ID", typeof(string));
    
            var stock_codeParameter = stock_code != null ?
                new ObjectParameter("stock_code", stock_code) :
                new ObjectParameter("stock_code", typeof(string));
    
            var comaprtment_IDParameter = comaprtment_ID != null ?
                new ObjectParameter("comaprtment_ID", comaprtment_ID) :
                new ObjectParameter("comaprtment_ID", typeof(string));
    
            var purpose_of_itemParameter = purpose_of_item != null ?
                new ObjectParameter("purpose_of_item", purpose_of_item) :
                new ObjectParameter("purpose_of_item", typeof(string));
    
            var mine_numberParameter = mine_number != null ?
                new ObjectParameter("mine_number", mine_number) :
                new ObjectParameter("mine_number", typeof(string));
    
            var date_of_requestParameter = date_of_request != null ?
                new ObjectParameter("date_of_request", date_of_request) :
                new ObjectParameter("date_of_request", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var unit_of_issueParameter = unit_of_issue != null ?
                new ObjectParameter("unit_of_issue", unit_of_issue) :
                new ObjectParameter("unit_of_issue", typeof(string));
    
            var approval_statusParameter = approval_status.HasValue ?
                new ObjectParameter("approval_status", approval_status) :
                new ObjectParameter("approval_status", typeof(int));
    
            var approverParameter = approver != null ?
                new ObjectParameter("approver", approver) :
                new ObjectParameter("approver", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertRequest", request_IDParameter, stock_codeParameter, comaprtment_IDParameter, purpose_of_itemParameter, mine_numberParameter, date_of_requestParameter, quantityParameter, unit_of_issueParameter, approval_statusParameter, approverParameter);
        }
    
        public virtual int insertShelf(string shelf_ID, string shelf_allocation)
        {
            var shelf_IDParameter = shelf_ID != null ?
                new ObjectParameter("shelf_ID", shelf_ID) :
                new ObjectParameter("shelf_ID", typeof(string));
    
            var shelf_allocationParameter = shelf_allocation != null ?
                new ObjectParameter("shelf_allocation", shelf_allocation) :
                new ObjectParameter("shelf_allocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertShelf", shelf_IDParameter, shelf_allocationParameter);
        }
    
        public virtual int insertShelfCompartment(string compartment_ID, string shelf_ID)
        {
            var compartment_IDParameter = compartment_ID != null ?
                new ObjectParameter("compartment_ID", compartment_ID) :
                new ObjectParameter("compartment_ID", typeof(string));
    
            var shelf_IDParameter = shelf_ID != null ?
                new ObjectParameter("shelf_ID", shelf_ID) :
                new ObjectParameter("shelf_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertShelfCompartment", compartment_IDParameter, shelf_IDParameter);
        }
    
        public virtual int insertStock(string stock_code, Nullable<int> quantity_available, string unit_of_withdraw, string description_of_items, string unit_of_issue, Nullable<int> reorder_level, Nullable<int> minimum_level, Nullable<System.DateTime> date_of_order, Nullable<System.DateTime> expiry_date, string stock_type, string compartment_ID, string category_ID, Nullable<int> availability)
        {
            var stock_codeParameter = stock_code != null ?
                new ObjectParameter("stock_code", stock_code) :
                new ObjectParameter("stock_code", typeof(string));
    
            var quantity_availableParameter = quantity_available.HasValue ?
                new ObjectParameter("quantity_available", quantity_available) :
                new ObjectParameter("quantity_available", typeof(int));
    
            var unit_of_withdrawParameter = unit_of_withdraw != null ?
                new ObjectParameter("unit_of_withdraw", unit_of_withdraw) :
                new ObjectParameter("unit_of_withdraw", typeof(string));
    
            var description_of_itemsParameter = description_of_items != null ?
                new ObjectParameter("description_of_items", description_of_items) :
                new ObjectParameter("description_of_items", typeof(string));
    
            var unit_of_issueParameter = unit_of_issue != null ?
                new ObjectParameter("unit_of_issue", unit_of_issue) :
                new ObjectParameter("unit_of_issue", typeof(string));
    
            var reorder_levelParameter = reorder_level.HasValue ?
                new ObjectParameter("reorder_level", reorder_level) :
                new ObjectParameter("reorder_level", typeof(int));
    
            var minimum_levelParameter = minimum_level.HasValue ?
                new ObjectParameter("minimum_level", minimum_level) :
                new ObjectParameter("minimum_level", typeof(int));
    
            var date_of_orderParameter = date_of_order.HasValue ?
                new ObjectParameter("date_of_order", date_of_order) :
                new ObjectParameter("date_of_order", typeof(System.DateTime));
    
            var expiry_dateParameter = expiry_date.HasValue ?
                new ObjectParameter("expiry_date", expiry_date) :
                new ObjectParameter("expiry_date", typeof(System.DateTime));
    
            var stock_typeParameter = stock_type != null ?
                new ObjectParameter("stock_type", stock_type) :
                new ObjectParameter("stock_type", typeof(string));
    
            var compartment_IDParameter = compartment_ID != null ?
                new ObjectParameter("compartment_ID", compartment_ID) :
                new ObjectParameter("compartment_ID", typeof(string));
    
            var category_IDParameter = category_ID != null ?
                new ObjectParameter("category_ID", category_ID) :
                new ObjectParameter("category_ID", typeof(string));
    
            var availabilityParameter = availability.HasValue ?
                new ObjectParameter("availability", availability) :
                new ObjectParameter("availability", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertStock", stock_codeParameter, quantity_availableParameter, unit_of_withdrawParameter, description_of_itemsParameter, unit_of_issueParameter, reorder_levelParameter, minimum_levelParameter, date_of_orderParameter, expiry_dateParameter, stock_typeParameter, compartment_IDParameter, category_IDParameter, availabilityParameter);
        }
    
        public virtual int insertStockCategory(string category_ID, string description)
        {
            var category_IDParameter = category_ID != null ?
                new ObjectParameter("category_ID", category_ID) :
                new ObjectParameter("category_ID", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertStockCategory", category_IDParameter, descriptionParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<StockToReorder_Result> StockToReorder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockToReorder_Result>("StockToReorder");
        }
    }
}
